<?php

/**
 * @file
 * Functions to support theming in the Bartik theme.
 */

require_once('omega-functions.php');

use Drupal\Core\Template\RenderWrapper;

// Include Breakpoint Functionality
use Drupal\breakpoint\Entity\Breakpoint;
use Drupal\breakpoint\Entity\BreakpointGroup;

use Drupal\Core\Config\Config;
use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\Config\Entity\ConfigStorageController;

use Drupal\Core\Url;
use Drupal\Core\Render\Element;

use Drupal\Component\Utility\SafeMarkup;
use Drupal\Component\Render\FormattableMarkup;

use Drupal\Core\Template\Attribute;
use Drupal\Core\Language\Language;
use Drupal\Core\Theme\ThemeSettings;

use Drupal\image\Entity\ImageStyle;


/**
 * Implements hook_theme().
 */
function omega_theme() {
  return array(
    'omega_indicator' => array(
      'variables' => array(
        'logo' => NULL,
      ),
      'template' => 'omega-indicator',
    ),
  );
} // END omega_theme

function omega_preprocess_omega_indicator(&$vars) {
  
  $img = drupal_get_path('theme', 'omega') . '/logo.png';
  $logo_image = SafeMarkup::format('<img src=":image" />', array(':image' => $img));
  $omega_url = Url::fromUri('http://drupal.org/project/omega', array(
    'attributes' => array(
      'id' => 'indicator-toggle',
      'class' => array(
        'indicator-open'
      ),
    )
  ));
  
  $omega_link = \Drupal::l($logo_image, $omega_url);
  $vars['logo'] = $omega_link;
  
} // END omega_preprocess_omega_indicator


/**
 * Implements hook_preprocess().
 */
function omega_preprocess(&$variables, $hook) {
  
} // END omega_preprocess

/**
 * Implements hook_page_attachments_alter().
 */
function omega_page_attachments_alter (&$attachments) {
  
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  // require omega.js library
  $attachments['#attached']['library'][] = 'omega/omega';
  
  $screenDemo = theme_get_setting('screen_demo_indicator', $theme);
  
  if ($screenDemo) {
    // get the default Breakpoints
    $breakpoints = _omega_getActiveBreakpoints($theme);

    $layouts = array();    
    foreach($breakpoints as $breakpoint) {
      $idtrim = str_replace('.', "-", $breakpoint->getBaseId());
      $layouts[$breakpoint->getBaseId()] = array(
        'query' => $breakpoint->getMediaQuery(),
        'name' => $breakpoint->getLabel()
      );
    }
    // add all the current (possible) breakpoints to the omega_breakpoints variable for use in omega.js
    $attachments['#attached']['drupalSettings']['omega_breakpoints'] = $layouts;
    $attachments['#attached']['drupalSettings']['omega']['activeLayout'] = omega_return_active_layout();
    $attachments['#attached']['drupalSettings']['omega']['activeTheme'] = $theme;    
  }
  
  // Functionality to attach selected css/js from omega theme settings
  $toggleCSS = _omega_optional_css($theme);  
  foreach ($toggleCSS as $style => $data) {
    // check it is actively enabled
    if ($data['status']) {
      // attach libraries as required
      $attachments['#attached']['library'][] = $data['library'];
    }
  }
  
  //krumo($attachments);

} // END omega_page_attachments_alter

/**
 * Implements hook_page_top().
 */
function omega_page_top (array &$page_top) {
  // Evidently HOOK_page_top doesn't fire for themes. Must move this somehwere else.
  /*
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $screenDemo = theme_get_setting('screen_demo_indicator', $theme);
  krumo($page_top);
  if ($screenDemo) {
    $page_top['themedemoblock'] = array(
      '#theme' => 'omega_indicator',
      '#weight' => -9999
    );
  }
  dsm($page_top);
  */
} // END omega_page_top

/**
 * Implements hook_page_bottom().
 */
function omega_page_bottom(&$page_bottom) {
  
} // END omega_page_bottom

function omega_preprocess_html(&$vars) {
  
} // END omega_preprocess_html

function omega_css_alter(&$css, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  
  
  
  // need to test
  
  $ogsLayout = theme_get_setting('enable_omegags_layout', $theme);
  $layout = isset($ogsLayout) ? $ogsLayout : TRUE;
  // turn off Omega.gs generated layout styles if user has turned off the awesome.
  if (!$layout && isset($css['omega-layout.css'])) {
    unset($css['omega-layout.css']);
  }
} // END omega_css_alter


/**
 * Implements hook_js_alter().
 */
function omega_js_alter(&$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {

} // END omega_js_alter

/**
 * Implements hook_preprocess_HOOK() for page templates.
 *
 */
function omega_preprocess_page(&$vars) {
  
  $page = $vars['page'];
  //krumo($page);
  
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $themes = \Drupal::service('theme_handler')->listInfo();
  $defaultLayout = theme_get_setting('default_layout');
  $themeSettings = $themes[$theme];

  $screenDemo = theme_get_setting('screen_demo_indicator', $theme);
  // Enable the helper div with info on screen size, breakpoints active, etc.
  if ($screenDemo) {
    if (count($vars['page']['content']) >= 1) {
      $vars['page']['content']['themeinfoblock'] = array(
        '#theme' => 'omega_indicator',
        '#weight' => -9999
      );
    }
    else {
      $vars['page']['content'] = array(
        '#region' => 'content',
        '#theme_wrappers' => array(
          'region'
        ),
        'themeinfoblock' => array(
          '#theme' => 'omega_indicator',
          '#weight' => -9999
        ),
      );
    }
  }
  
  // Display demo placeholder blocks for every region.
  $regionDemo = theme_get_setting('block_demo_mode', $theme);
  
  if ($regionDemo) {
    //dsm($page);
    drupal_set_message(t('Region Demonstration mode is on. This can be turned off in theme settings.'), 'warning');
    $theme_regions = $themeSettings->info['regions'];
    $regionSkip = theme_get_setting('block_demo_excluded_regions', $theme);
    
    foreach($theme_regions as $region => $region_name) {
      // skip the regions listed in block_demo_excluded_regions, primarily page_top & page_bottom
      if (!in_array($region, $regionSkip)) {
        // here we want to add a simple block that we can use to demonstrate region placements for ALL regions in the theme(s)
        if (isset($vars['page'][$region]['#region'])) {
          $regiondemoblock = array(
            'regiondemoblock' => array(
              '#markup' => '<div id="theme-demo-block--'. $region .'" class="theme-demo-block active-region clearfix"><h3 class="block-title demo-block-title">' . t('@regionname', array('@regionname' => $region_name . ' Region')) . '</h3><div class="demo-block-content"></div></div>',
              '#weight' => -9999  
            ),
          );
          $vars['page'][$region] = $regiondemoblock + $vars['page'][$region];
        }
        else {
          // no region was already present, so we'll need to insert it
          $vars['page'][$region] = array(
            '#region' => $region,
            'regiondemoblock' => array(
              '#markup' => '<div id="theme-demo-block--'. $region .'" class="theme-demo-block inactive-region clearfix"><h3 class="block-title demo-block-title">' . t('@regionname', array('@regionname' => $region_name . ' Region')) . '</h3><div class="demo-block-content"></div></div>',
              '#weight' => -9999
            ),
          );
        }
      }
      else {
        // works for not displaying page top and bottom or other omitted regions.
      }
    }
  }
  
  // create an array to define the with-sidebar_first without-sidebar_first classes
  $region_classes = array();
  $layout = omega_return_active_layout();
  $layouts = theme_get_setting('layouts', $theme);
  $region_groups = $layouts[$layout]['region_groups']['all'];
  
  foreach($region_groups as $group_id => $group_info) {
    $groupRegions = Element::children($region_groups[$group_id]['regions']);
    foreach($groupRegions as $region_id) {
      $altered_region_id = str_replace("_", "-", $region_id);
    
      if (isset($vars['page'][$region_id]['#region'])) {
        $region_classes[$group_id][] = 'with--' . $altered_region_id;
      }
      else {
        $region_classes[$group_id][] = 'without--' . $altered_region_id;
      }
    } 
    // convert array of class names to string version
    $region_classes[$group_id] = implode(" ", $region_classes[$group_id]);
  }
  // assign classes to page.tpl.php
  $vars['region_classes'] = $region_classes;
} // END omega_preprocess_page

/**
 * Implements hook_preprocess_HOOK() for region templates.
 *
 */
function omega_preprocess_region(&$vars) {
  //dsm($vars);
} // END omega_preprocess_region

/**
 * Implements hook_preprocess_HOOK() for node templates.
 *
 */
function omega_preprocess_node(&$vars) {
  
} // END omega_preprocess_node

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function omega_preprocess_block(&$vars) {
  
} // END omega_preprocess_block

/**
 * hook_html_head_alter()
 */
function omega_html_head_alter(&$head_elements) {
  // cleartype
  $head_elements['omega_meta_clear_type'] = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'http-equiv' => "cleartype",
      'content' => "on",
    ),
    '#weight' => -998,
  );
  // update viewport tag
  $head_elements['viewport'] = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'content' => 'width=device-width, initial-scale=1, maximum-scale=2, minimum-scale=1, user-scalable=yes',
      'name' => 'viewport',
    ),
    '#weight' => -997,
  );
} // END omega_html_head_alter